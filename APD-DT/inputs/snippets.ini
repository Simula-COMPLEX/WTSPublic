[APD-SM]

Setup = def setup():
        {
            self.loading_schedule(clas_ins_map, clas_ref_map, model_map)
        }

LoadMedicationPlan = def load_medication_plan():
        {
                     for med_plan in med_plans:
                        first_dose_date = med_plan['first_dose_date']
                        period_days = int(med_plan['period_days'])
                        time = med_plan['time']
                        doses = med_plan['doses']

                        # check schedule is correct
                        if first_dose_date != datetime.datetime.today().date():
                            logging.info("[APD-DT] Incorrect first dose date! Using today's date [{}] instead.".format(
                                datetime.datetime.today().date()))
                            first_dose_date = datetime.datetime.today().date()
                        for _ in range(period_days):
                            daily_plan = str(first_dose_date) + " " + str(time) + " " + str(doses)
                            first_dose_date += datetime.timedelta(days=1)
                            med_schedule.append(daily_plan)

                    # if schedule is available
                    if len(med_schedule) > 0:
                        logging.info('[APD-DT] Medication schedule loaded...')
                        self.dispensing(med_schedule)
                    else:
                        logging.info('[APD-DT] No medication schedule! Waiting for the schedule...')
        }

CheckMedicationPlan = def check_medication_plan():
        {
            logging.info("[APD-DT] Checking if schedule is updated...")
            while True:
                time.sleep(0.1)
                global is_updated
                if is_updated:
                    break
        }

Dispense = def dispense():
        {
            scheduler = AsyncIOScheduler(timezone=datetime.datetime.utcnow().astimezone().tzinfo)
            date_times = []
            for med in med_schedule:
                med_detail = med.split(" ")
                date_time = med_detail[0] + " " + med_detail[1]
                date_times.append(date_time)
                doses = med_detail[2]
                scheduler.add_job(self.dispense_medicine, 'date', run_date=date_time, args=[doses, date_time])

            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            thread = Thread(target=loop.run_forever)
            thread.start()
            scheduler.start()
            while True:
                time.sleep(1)
                now = str(datetime.datetime.now())
                if now > max(date_times):
                    loop.call_soon_threadsafe(loop.stop)
                    break
            thread.join()
            logging.info('[APD-DT] Schedule is completed!...')
        }